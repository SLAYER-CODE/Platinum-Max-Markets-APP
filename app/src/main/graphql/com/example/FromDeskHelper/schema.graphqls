# This file was generated. Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

type Associate {
    age: String
    dni: String!
    home_direction: String!
    id: ID!
    lastname: String!
    local_id: Establishments!
    name: String!
    nik: String!
    secondlastname: String!
    secondname: String!
    user_id: Users!
}

type Brands {
    brand_id: ID!
    brand_name: String!
}

type Categories {
    category_id: ID!
    category_name: String!
}

type Directions {
    amenity: String!
    avenide: String!
    city: String!
    country: String!
    departament: String!
    direction_id: ID!
    distrit: String!
    lg: String!
    lt: String!
    neighbourhood: String!
    place: String!
    postal_code: String!
    province: String!
    reference: String!
    urban_zone: String!
}

type Establishments {
    description: String!
    floor: Int!
    foro: Int!
    id: ID!
    image_relation: SloganImages
    mall_id: Mall!
    name: String!
    position: Int!
    web: String!
}

type Functions {
    anonime_acces: Boolean!
    details: String!
    id_fuction: ID!
    name: String!
    root_acces: Boolean!
    user_acces: Boolean!
}

type ListWish {
    user_id: Users!
    wish_id: ID!
    wish_products_id: [Products!]!
}

type Mall {
    description: String!
    direction_id: Directions
    duel: String!
    establishments: Int!
    floors: Int!
    foro: Int!
    id: ID!
    image_relation: MallImages
    name: String!
    update: DateTime!
}

type MallImages {
    image_description: String!
    image_id: ID!
    image_name: String!
    image_realation: [Mall!]
    md5_image: String!
}

type Mutation {
    createSessions(myval: UsersInput!): Users!
    createproduct(
        "Image Por defecto"
        file: [Upload!],
        myval: ProductsInput!
    ): Products!
}

type Phone {
    country_code: String!
    phone_id: ID
    phone_number: String
}

type ProductImages {
    image_description: String!
    image_id: ID!
    image_name: String!
    product_relation: Products
}

type Products {
    brands_products: [Brands!]
    category_products: [Categories!]
    description: String!
    image_realation: [ProductImages!]
    old_price: Float
    price_cantidad: Float!
    price_unity: Float
    product_id: ID!
    product_name: String!
    qr: String
    quantity_cantidad: Int
    quantity_unity: Int
    update_product: DateTime!
    user_relation: Users
}

type Query {
    Brands: [Brands!]!
    Categories: [Categories!]!
    Products: [Products!]!
    ProductsCount: Int!
    Sessiones: [Users!]!
    comprobation: Boolean!
    comprobationAdmin: Boolean!
    comprobationConnection: Boolean!
    comprobationEmployed: Boolean!
    comprobationRoot: Boolean!
    comprobationUser(token: String!): Boolean!
    comprobationWorked: Boolean!
    getDataAsociate: Associate!
    getDataEmployed: UserWorkedGet!
    getRoles: RoleGet!
    getRolesEmployed: [Boolean!]!
    ping: String!
}

type RoleGet {
    fuctions: [Functions!]!
    user: Boolean!
}

type ShoppingCart {
    shoppingCardt_id: ID!
}

type SloganImages {
    image_description: String!
    image_id: ID!
    image_name: String!
    image_realation: [Establishments!]
    md5_image: String!
}

type UserWorkedGet {
    age: String!
    email: String!
    establishmentNumber: String!
    mall: String!
    name: String!
    nik: String!
}

type Users {
    birthday: DateTime!
    email: String!
    email_verify: Boolean
    lastToken: String!
    phone_id: Phone
    photo: String!
    random_code: Int
    shoppingCardt_id: ShoppingCart
    uid: String!
    userProducts: [Products!]
    user_id: ID!
    username: String
    wish_id: ListWish
}

"The javascript `Date` as string. Type represents date and time as the ISO Date string."
scalar DateTime

"The `Upload` scalar type represents a file upload."
scalar Upload

input BrandsInput {
    brand_name: String!
    id: Float
}

input CategoriesInput {
    category_name: String!
    id: Float
}

input ImageProductInput {
    image_description: String
    image_name: String!
}

input ProductsInput {
    brands_products: [BrandsInput!]!
    category_products: [CategoriesInput!]!
    description: String
    image_realation: [ImageProductInput!]!
    old_price: Float!
    price_cantidad: Float!
    price_unity: Float
    product_name: String!
    qr: String
    quantity_cantidad: Float
    quantity_unity: Float
    update_product: DateTime
}

input UsersInput {
    birthday: DateTime!
    email: String!
    photo: String
    random_code: Float
    uid: String!
    user_id: Float
    username: String
}
